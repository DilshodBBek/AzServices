// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ServiceCatalog.Infrastructure.Data.Contex;

#nullable disable

namespace ServiceCatalog.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20231216111344_initDb")]
    partial class initDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ServiceCatalog.Domain.Entity.Booking.BookingPlaystation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BronePhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("BroneTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<int>("ServiceId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("BookingPlaystations");
                });

            modelBuilder.Entity("ServiceCatalog.Domain.Entity.Common.Base", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<TimeSpan>("CloseTime")
                        .HasColumnType("interval");

                    b.Property<string>("Descryption")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<TimeSpan>("OpenTime")
                        .HasColumnType("interval");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Base");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Base");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("ServiceCatalog.Domain.Entity.Common.BroneStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BookingStatusId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<List<int>>("StatuseId")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<int>("UnitBaseId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UnitBaseId");

                    b.ToTable("BroneStatus");
                });

            modelBuilder.Entity("ServiceCatalog.Domain.Entity.Common.UnitBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("UnitBase");

                    b.HasDiscriminator<string>("Discriminator").HasValue("UnitBase");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("ServiceCatalog.Domain.Entity.File.FileContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BaseId")
                        .HasColumnType("integer");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BaseId");

                    b.ToTable("FileContents");
                });

            modelBuilder.Entity("ServiceCatalog.Domain.Entity.Playstation.PlaystationArea", b =>
                {
                    b.HasBaseType("ServiceCatalog.Domain.Entity.Common.Base");

                    b.HasDiscriminator().HasValue("PlaystationArea");
                });

            modelBuilder.Entity("ServiceCatalog.Domain.Entity.Stadium.Stadium", b =>
                {
                    b.HasBaseType("ServiceCatalog.Domain.Entity.Common.Base");

                    b.HasDiscriminator().HasValue("Stadium");
                });

            modelBuilder.Entity("ServiceCatalog.Domain.Entity.Playstation.Cabin", b =>
                {
                    b.HasBaseType("ServiceCatalog.Domain.Entity.Common.UnitBase");

                    b.Property<int>("PlaystationAreaId")
                        .HasColumnType("integer");

                    b.HasIndex("PlaystationAreaId");

                    b.HasDiscriminator().HasValue("Cabin");
                });

            modelBuilder.Entity("ServiceCatalog.Domain.Entity.Stadium.Field", b =>
                {
                    b.HasBaseType("ServiceCatalog.Domain.Entity.Common.UnitBase");

                    b.Property<int>("StadiumId")
                        .HasColumnType("integer");

                    b.HasIndex("StadiumId");

                    b.HasDiscriminator().HasValue("Field");
                });

            modelBuilder.Entity("ServiceCatalog.Domain.Entity.Booking.BookingPlaystation", b =>
                {
                    b.HasOne("ServiceCatalog.Domain.Entity.Playstation.Cabin", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("ServiceCatalog.Domain.Entity.Common.BroneStatus", b =>
                {
                    b.HasOne("ServiceCatalog.Domain.Entity.Common.UnitBase", "UnitBase")
                        .WithMany("BroneStatuseId")
                        .HasForeignKey("UnitBaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UnitBase");
                });

            modelBuilder.Entity("ServiceCatalog.Domain.Entity.File.FileContent", b =>
                {
                    b.HasOne("ServiceCatalog.Domain.Entity.Common.Base", "Base")
                        .WithMany("PhotoOrVideo")
                        .HasForeignKey("BaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Base");
                });

            modelBuilder.Entity("ServiceCatalog.Domain.Entity.Playstation.Cabin", b =>
                {
                    b.HasOne("ServiceCatalog.Domain.Entity.Playstation.PlaystationArea", "PlaystationArea")
                        .WithMany("Сabins")
                        .HasForeignKey("PlaystationAreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlaystationArea");
                });

            modelBuilder.Entity("ServiceCatalog.Domain.Entity.Stadium.Field", b =>
                {
                    b.HasOne("ServiceCatalog.Domain.Entity.Stadium.Stadium", "Stadium")
                        .WithMany("Fields")
                        .HasForeignKey("StadiumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stadium");
                });

            modelBuilder.Entity("ServiceCatalog.Domain.Entity.Common.Base", b =>
                {
                    b.Navigation("PhotoOrVideo");
                });

            modelBuilder.Entity("ServiceCatalog.Domain.Entity.Common.UnitBase", b =>
                {
                    b.Navigation("BroneStatuseId");
                });

            modelBuilder.Entity("ServiceCatalog.Domain.Entity.Playstation.PlaystationArea", b =>
                {
                    b.Navigation("Сabins");
                });

            modelBuilder.Entity("ServiceCatalog.Domain.Entity.Stadium.Stadium", b =>
                {
                    b.Navigation("Fields");
                });
#pragma warning restore 612, 618
        }
    }
}
